# -*- coding: utf-8 -*-
"""
Created on Tue Dec 25 18:51:51 2018

@author: robin
"""

from functions import *
import pandas as pd
#from statsmodels.graphics.tsaplots import plot_pacf
#from statsmodels.graphics.tsaplots import plot_acf
import numpy as np


#==============================================================================
# Simulate the chain according to a multinomial gaussian
#==============================================================================
Kn = 1000
seed = 2042
p = 10
n = 500
mu = 0
sigma = 1
sigma_e = 1
coefs = np.ones(p).reshape(-1,1)

model1 = simul_indep_multi_gaussian(n, p, mu, sigma, sigma_e ,coefs, seed=None)
Y = model1[0]
X = model1[1]
tau = 0.5


# MCMB
beta, IC = MCMB(Y=Y, X=X, tau=tau, size=Kn, alpha=0.05, parallelize_mode='seq')
IC

#==============================================================================
# Burn-in and autocorrelation computation and plot
#==============================================================================
####### Autocorrelations computation
# For the classic MCMB
chain = MCMB(Y=Y, X=X, tau=tau, size=Kn, alpha=0.05, return_chain=True)
betas_chains = [pd.Series([chain[i][j] for i in range(Kn)]) for j in range(p)] # Get the p betas chains generated by the MCMB algorithm 

# For the  MCMB-A
chain_A = MCMB(Y=Y, X=X, tau=tau, size=Kn, alpha=0.05, return_chain=True, extension='A')
betas_chains_A = [pd.Series([chain_A[i][j] for i in range(Kn)]) for j in range(p)] # Get the p betas chains generated by the MCMB algorithm 

# For the classic MCMB with the sample-spacing = 7
chain_7s = MCMB(Y=Y, X=X, tau=tau, size=Kn, alpha=0.05, return_chain=True, sample_spacing=7)
betas_chains_7s = [pd.Series([chain_7s[i][j] for i in range(Kn)]) for j in range(p)] # Get the p betas chains generated by the MCMB algorithm 
# kill the autocorrelations

# For the parallelized version of MCMB
chain_p = MCMB(Y=Y, X=X, tau=tau, size=Kn, alpha=0.05, return_chain=True, parallelize_mode='p')
betas_chains_p = [pd.Series([chain_p[i][j] for i in range(Kn)]) for j in range(p)] # Get the p betas chains generated by the MCMB algorithm 
# The betas are more correlated than in the MCMB classic version

# For the parallelized version of MCMB-A
chain_A_p = MCMB(Y=Y, X=X, tau=tau, size=Kn, alpha=0.05, return_chain=True, extension='A',parallelize_mode='p')
betas_chains_A_p = [pd.Series([chain_A_p[i][j] for i in range(Kn)]) for j in range(p)] # Get the p betas chains generated by the MCMB algorithm 

## Autocorrelations plot

plot_same_graph(betas_chains, title=' - classic method')
plot_same_graph(betas_chains_A, title=' - A method') 
plot_same_graph(betas_chains_7s, title=' - 7 sample spacing method') 
plot_same_graph(betas_chains_p, title=' - parallelized method') 
plot_same_graph(betas_chains_A_p, title=' - A and parallelized method') 

# Burn-in evaluation
plot_same_graph(betas_chains, autocorr=False, title=' - classic method') # 10-18 iterations
plot_same_graph(betas_chains_A, autocorr=False, title=' - A method') # 3 iterations
plot_same_graph(betas_chains_7s, autocorr=False, title=' - 7 sample spacing method') # 1-3 iterations
plot_same_graph(betas_chains_p, autocorr=False, title=' - parallelized method') # 10-15 iterations with more variations
plot_same_graph(betas_chains_A_p, autocorr=False, title=' - A and parallelized method') # 3 iterations





